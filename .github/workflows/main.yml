name: build

on: [push, pull_request]

env:
  # color output for pytest and tox
  PYTEST_ADDOPTS: "--color=yes"
  PY_COLORS: 1

jobs:
  test:
    name: Test - ${{ matrix.python }} - ${{ matrix.os }}
    runs-on: ${{ matrix.os }}-latest

    strategy:
      matrix:
        # TODO: implement windows
        # os: [ubuntu, macos, windows]
        os: [windows]
        # TODO: put back 3.11, 3.12
        # python: ["3.10", "3.11", "3.12"]
        python: ["3.10"]
        # TODO: put back 3.8, 3.9
        # include:
        #   - os: ubuntu
        #     python: "3.8"
        #   - os: ubuntu
        #     python: "3.9"

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}
          cache: "pip"
          cache-dependency-path: "**/requirements/*"
      - name: Install locale (Linux)
        if: startsWith(runner.os, 'Linux')
        run: sudo locale-gen fr_FR.UTF-8 tr_TR.UTF-8
      - name: Install pandoc
        uses: r-lib/actions/setup-pandoc@v2
        with:
          pandoc-version: "2.9.2"
      - name: Install tox
        run: python -m pip install -U pip tox
      - name: Set up virtualenv
        # our tasks.py wants a virtualenv, so make one
        # unfortunately, every step that uses it has to be split by
        # platform, because activating it is different on unix and windows
        if: runner.os != 'Windows'
        run: python -m venv venv
      - name: Set up virtualenv (windows)
        if: runner.os == 'Windows'
        run: |
          python -m venv venv
          if ($LASTEXITCODE -ne 0) {
              Write-Host "Virtual environment creation failed: $LASTEXITCODE"
              exit $LASTEXITCODE
          }
          $pwd
          # dir venv\Scripts
      - name: Set up dependencies with invoke (not windows)
        if: runner.os != 'Windows'
        run: |
          source venv/bin/activate
          python -m pip install invoke
          python -m invoke setup
      - name: Set up dependencies with invoke (windows)
        if: runner.os == 'Windows'
        run: |
          $pwd
          . venv\Scripts\activate
          Import-Module venv
          python -m pip install invoke
          python -m invoke setup
      - name: Info
        run: |
          echo "=====  PYTHON  ====="
          python --version
          echo "=====  PANDOC  ====="
          pandoc --version | head -2
      - name: Run tests with coverage (not windows)
        if: runner.os != 'Windows'
        run: |
          source venv/bin/activate
          python -m pytest --cov=pelican
          ls -l .coverage.*
        env:
          # control the filename to avoid issues with uploading
          # see also https://github.com/actions/upload-artifact/issues/478#issuecomment-2096976037
          COVERAGE_FILE: .coverage.${{ matrix.os }}.${{ matrix.python }}.${{ github.event_name }}
      - name: Run tests with coverage (windows)
        if: runner.os == 'Windows'
        run: |
          .\venv\bin\activate
          python -m pytest --cov=pelican
        env:
          # control the filename to avoid issues with uploading
          # see also https://github.com/actions/upload-artifact/issues/478#issuecomment-2096976037
          COVERAGE_FILE: .coverage.${{ matrix.os }}.${{ matrix.python }}.${{ github.event_name }}

      - name: Upload coverage data
        uses: "actions/upload-artifact@v4"
        with:
          name: coverage-data
          path: ".coverage.${{ matrix.os }}.${{ matrix.python }}.${{ github.event_name }}"
          if-no-files-found: error

  # see https://github.com/actions/upload-artifact/blob/main/merge/README.md#combining-all-artifacts-in-a-workflow-run
  merge:
    runs-on: ubuntu-latest
    # needs the upload-artifact action to have been run
    needs: test
    steps:
      - name: Merge Artifacts
        uses: actions/upload-artifact/merge@v4

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pdm-project/setup-pdm@v4
        with:
          python-version: "3.11"
          cache: true
          cache-dependency-path: ./pyproject.toml
      - name: Install dependencies
        run: |
          pdm install --no-default --dev
      - name: Run linters
        run: pdm lint --diff
      - name: Run pre-commit checks on all files
        uses: pre-commit/action@v3.0.1

  coverage:
    runs-on: "ubuntu-latest"
    needs: merge
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}
          cache: "pip"
          cache-dependency-path: "**/requirements/*"

      - name: "Install Coverage.py"
        run: "python -m pip install --upgrade coverage[toml]"

      - name: "Download coverage data"
        uses: actions/download-artifact@v4
        with:
          name: coverage-data

      - name: "Combine & check coverage"
        run: |
          set -xe
          python -m coverage combine
          python -m coverage report --fail-under=74

  build:
    name: Test build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pdm-project/setup-pdm@v4
        with:
          python-version: "3.11"
          cache: true
          cache-dependency-path: ./pyproject.toml
      - name: Install dependencies
        run: pdm install --dev
      - name: Build package
        run: pdm build
      - name: Test build
        run: pdm run pytest --check-build=dist  pelican/tests/build_test

  docs:
    name: Build docs
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
          cache-dependency-path: "**/requirements/*"
      - name: Install tox
        run: python -m pip install -U pip tox
      - name: Check
        run: tox -e docs
      - name: cache the docs for inspection
        uses: actions/upload-artifact@v4
        with:
          name: docs
          path: docs/_build/html/

  deploy:
    name: Deploy
    environment: Deployment
    needs: [test, lint, docs, build]
    runs-on: ubuntu-latest
    if: github.ref=='refs/heads/master' && github.event_name!='pull_request' && github.repository == 'getpelican/pelican'

    permissions:
      contents: write
      id-token: write

    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Check release
        id: check_release
        run: |
          python -m pip install --upgrade pip
          python -m pip install autopub[github]
          autopub check

      - name: Publish
        if: ${{ steps.check_release.outputs.autopub_release=='true' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          autopub prepare
          autopub commit
          autopub build
          autopub githubrelease

      - name: Upload package to PyPI
        if: ${{ steps.check_release.outputs.autopub_release=='true' }}
        uses: pypa/gh-action-pypi-publish@release/v1
